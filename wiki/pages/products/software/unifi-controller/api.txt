Documentation of API endpoints on the UniFi controller software.  This is a reverse engineering project that is based on browser captures, jar dumps, and reviewing other software that has been written to work with the controller.  It's received minimal testing.

There are two main types of calls.  One would be the REST-like which provide get/post/delete where post and delete are often tied to the _id of the object that you are working with.  The second major type of web interface provided is an agent/call based system where you pass a command to an agent to perform an action.  Both use application/json formatting for all data transfer.

**NOTE: All calls are relative to the base controller URL**

Calls return both a web status as well as json formatted output.  200 codes indicate a successful call and other indicate errors. I am using the placeholder `{site}` for the site name which for many installations will be `default`.

<code javascript>
# Login required
{ "data" : [ ] , "meta" : { "msg" : "api.err.LoginRequired" , "rc" : "error"}}
# Call was a success but returned no values
{ "data" : [ ] , "meta" : { "rc" : "ok"}}
# NOTE: If meta contains a count it's because the data values have been truncated
'meta': {'count': 4818, 'rc': 'ok'} # from the api/s/{site}/stat/event endpoint
</code>

==== Unauthenticated ====

^ Path ^ Method ^ Notes ^
| status | GET | Returns some very basic server information - This appears to be the only endpoint that can be reached without an authentication |
| <code>
{ "data" : [ ] , "meta" : { "rc" : "ok" , "server_version" : "5.7.23" , "up" : true , "uuid" : "0e727580-ffff-ffff-ffff-403dcd5a7bd4"}}
</code> |||

==== Authentication ====

^ Path ^ Method ^ Notes ^
| api/login | POST | requires dict of username, password, and optionally remember=true for long-running sessions.  Returns 200 for success and a cooke that is your session |
| api/logout | GET | destroys the sever side session id which will make future attempts with that cookie fail |



== Uncategorized ==

Dump of found endpoints waiting for documentation

<code>
# logged in user
api/s/{site}/self

# Country codes
api/s/{site}/stat/ccode
# Availible WiFi channels
api/s/{site}/stat/current-channel

# Dashboard health
api/s/{site}/stat/health

# Active client devices
api/s/{site}/stat/sta
# Configured clients
api/s/{site}/stat/user

# Devices
api/s/{site}/stat/device-basic - mac, type
api/s/{site}/stat/device - can be filtered with macs: [ ..., ... ]

# Detailed site settings
api/s/{site}/stat/sysinfo

# /rest/ endpoints also have a /cnt/ which returns the count for the data portion
# can be used for any but seems targeted towards alarms

# Site settings
api/s/{site}/rest/setting - this is a big one with a weird mechanism for updating

# Firewall rules
api/s/{site}/rest/firewallrule - only lists user-defined rules

# Firewall groups
api/s/{site}/rest/firewallgroup

# routes
api/s/{site}/rest/routing

# Alarms
# List of alarms
api/s/{site}/rest/alarm
# list of unarchived alarms
api/s/{site}/rest/alarm?archived=false

# User groups - bandwith settings
api/s/{site}/rest/usergroup

# ?
api/s/{site}/rest/wlangroup

# Wireless networks
api/s/{site}/rest/wlanconf

# ?
api/s/{site}/rest/tag

# Site networks
api/s/{site}/rest/networkconf

# example backup path
dl/autobackup/autobackup_5.7.23_20180513_0000_1526169600008.unf

# Insights - sessions
api/s/{site}/stat/session?type=all&start=1526515200&end=1526688000

# Insights - EDU streams
api/s/{site}/stat/stream

# Switch port conf?
api/s/{site}/rest/portconf

# Configured port forwards and uPNP - transfer bytes is listed but doesn't appear populated
api/s/{site}/stat/portforward
</code>